cmake_minimum_required(VERSION 2.8)

project(GPSpattern)

set(SRC test.cpp gps_pattern.cpp )

add_executable(GPSpattern ${SRC})



# Adds includes for external libraries.
include_directories(/usr/include/glibmm-2.4/)
include_directories(/usr/lib/x86_64-linux-gnu/glibmm-2.4/include/)
include_directories(/usr/include/glib-2.0/)
include_directories(/usr/lib/x86_64-linux-gnu/glib-2.0/include/)
include_directories(/usr/include/libxml++-2.6/)
include_directories(/usr/lib/libxml++-2.6/include/)

# Links external libraries.
set(EXTERNAL_LIBS
  /usr/lib/libboost_system.so
  /usr/lib/libboost_iostreams.so
  /usr/lib/libboost_filesystem.so
)
target_link_libraries(GPSpattern ${EXTERNAL_LIBS})

# Turns on the debugging information.
# TODO This should have an option to turn off.
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -ggdb -O0 -Wfatal-errors")

# This turns on the C++11 options.
# TODO This should be set globally.
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR CMAKE_COMPILER_IS_GNUCXX)
    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag(--std=c++11 SUPPORTS_STD_CXX11)
    check_cxx_compiler_flag(--std=c++0x SUPPORTS_STD_CXX01)
    if(SUPPORTS_STD_CXX11)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=c++11")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --std=c++11")
    elseif(SUPPORTS_STD_CXX01)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=c++0x")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --std=c++0x")
    else()
        message(ERROR "Compiler does not support --std=c++11 or --std=c++0x.")
    endif()
endif()
